syntax = "proto3";

package stonkinator;

option go_package = "./stonkinator_rpc_service";

service StonkinatorService {
    rpc InsertExchange (InsertExchangeRequest) returns (InsertResponse);
    rpc GetExchange (GetByNameRequest) returns (GetExchangeResponse);
    rpc InsertInstrument (Instrument) returns (InsertResponse);
    rpc GetInstrument (GetBySymbolRequest) returns (Instrument);
    rpc InsertPriceData (InsertPriceDataRequest) returns (InsertResponse);
    rpc GetPriceData (GetPriceDataRequest) returns (GetPriceDataResponse);
    rpc GetDateTime (GetDateTimeRequest) returns (DateTime);
    rpc GetLastDate (GetLastDateRequest) returns (DateTime);

    rpc GetMarketListInstruments (MarketList) returns (Instruments);
    rpc GetMarketListInstrumentsPriceData (MarketList) returns (GetPriceDataResponse);

    // rpc InsertTradingSystem(TradingSystem) returns(InsertResponse);
}

message Instrument {
    optional string id = 1;
    string exchange_id = 2;
    string instrument_name = 3;
    string symbol = 4;
    optional string sector = 5;
}

message Instruments {
    repeated Instrument instruments = 1;
}

message PriceData {
    string instrument_id = 1;
    int32 open_price = 2;
    int32 high_price = 3;
    int32 low_price = 4;
    int32 close_price = 5;
    int64 volume = 6;
    string date_time = 7;
}

message MarketList {
    optional string id = 1;
    string market_list = 2;
}

// message TradingSystem {
//     string trading_system_name = 1;
//     string current_date_time = 2;
// }

message DateTime {
    string date_time = 1;
}

message InsertResponse {
    bool successful = 1;
    optional int32 num_inserted_items = 2;
}

message UpdateResponse {
    bool successful = 1;
}

message GetByIdRequest {
    string id = 1;
}

message GetByNameRequest {
    string name = 1;
}

message GetBySymbolRequest {
    string symbol = 1;
}

message InsertExchangeRequest {
    string exchange_name = 1;
    string currency = 2;
}

message GetExchangeResponse {
    bool successful = 1;
    string id = 2;
    string exchange_name = 3;
}

message InsertPriceDataRequest {
    repeated PriceData price_data = 1;
}

message GetPriceDataRequest {
    string instrument_id = 1;
    string start_date_time = 2;
    string end_date_time = 3;
} 

message GetPriceDataResponse {
    bool successful = 1;
    repeated PriceData price_data = 2;
}

message GetDateTimeRequest {
    string symbol = 1;
    bool order_asc = 2;
}

message GetLastDateRequest {
    string symbol_1 = 1;
    string symbol_2 = 2;
}